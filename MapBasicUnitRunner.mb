Include "mapbasic.def"
Include "MapBasicUnit.mb"

Declare Sub Main

Sub Main

Print "-----------"
Print "new testrun." + Time(24)
Print "-----------"

Call AssertTrue("ThisTestShouldPass", TRUE)

Call AssertTrue("ThisTestShouldFail", FALSE)

Dim StringToTest As String
Dim report As TestReport

report.testName = "testThatErrorConverterPresentsPassingTests"
report.hasTestPassed = TRUE
report.actual = "TRUE (type: Logical)"
report.expected = "TRUE (type: Logical)"
Dim actual As Logical
Call AssertStringEqual("testThatErrorConverterPresentsPassingTests", "0 passed - Test: testThatErrorConverterPresentsPassingTests.", ConvertErrorReportToString(report))

report.testName = "testThatErrorConverterPresentsFailingTests"
report.hasTestPassed = FALSE
report.actual = "FALSE (type: Logical)"
report.expected = "TRUE (type: Logical)"
Call AssertStringEqual("testThatErrorConverterPresentsFailingTests", "X FAILED - Test: testThatErrorConverterPresentsFailingTests. Expected TRUE (type: Logical), but was FALSE (type: Logical)", ConvertErrorReportToString(report))

StringToTest = "string to test"
Call AssertStringEqual("AssertPassesWhenInstancesOfTheSameStringAreEqual", StringToTest, StringToTest)

Call AssertStringEqual("AssertFailsWhenStringDifferent", StringToTest, UCase$(StringToTest))

Dim one as Integer
Dim two as Integer
one = 1
two = 2
Call AssertIntegerEqual("AssertIntegerEqualPassesWhenSameIntegerIsTested", one, one)
Call AssertIntegerEqual("AssertIntegerEqualFailsWhenDifferentValuesAreTested", one, two)

Dim onePointZero as Float
onePointZero = 1.0
Call AssertFloatEqual("AssertFloatEqualPassesWhenSameFloatIsTested", onePointZero, onePointZero, 0.0)
Dim twoPointZero as Float
twoPointZero = 2.0
Call AssertFloatEqual("AssertFloatEqualFailsWhenDifferentFloatsAreTested", onePointZero, twoPointZero, 0.0)
Dim almostZero as Float
almostZero = (1.00000000000001 - 1) - 0.00000000000001

Call AssertFloatEqual("AssertFloatEqualFailsWhenRoundingIsTested", 0.0, almostZero, 0.0)
Call AssertFloatEqual("AssertFloatEqualPassesWhenWithinRoundingNegativeIsTested", 0.0, almostZero, 0.000001)
Call AssertFloatEqual("AssertFloatEqualPassesWhenWithinRoundingPositiveIsTested", 0.0, -almostZero, 0.000001)


End Sub