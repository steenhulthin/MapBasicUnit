{"name":"Mapbasicunit","tagline":"An Unit Test System for MapBasic","body":"MapBasicUnit\r\n============\r\n\r\nAn Unit Test System for MapBasic\r\n--------------------------------\r\n\r\n[MapBasic](http://www.mapinfo.com/product/mapinfo-mapbasic/) is language for automating [MapInfo](http://www.mapinfo.com/products/desktop/), which is a desktop [GIS](http://en.wikipedia.org/wiki/Geographic_information_system). \r\n\r\nMapBasicUnit aims to give MapBasic developers a structured way of testing their code that can be automated. \r\n\r\nUsage\r\n-----\r\n\r\n1. Create a testrunner .mb file\r\n2. Include the MapBasicUnit.mb\r\n3. Include the .mb file that you want to test\r\n4. Start writing unit test with assertions\r\n\r\n*Hopefully this process will be simplified in later versions*\r\n\r\n### Create a testrunner .mb file\r\n\r\nThe basic testrunner:\r\n\r\n    Declare Sub Main\r\n    \r\n    Sub Main\r\n    Print \"-----------\"\r\n    Print \"new testrun.\" + Time(24)\r\n    Print \"-----------\"\r\n    End Sub\r\n\r\nSave the file. The suggested naming convention is test_<name_of_mb_to_test>.mb.\r\n\r\n### Include the MapBasicUnit.mb\r\n\r\nIf MapBasicUnit is located in the same directory as the testrunner:\r\n    Include \"MapBasicUnit.mb\"\r\n    \r\n    Declare Sub Main\r\n    \r\n    Sub Main\r\n    Print \"-----------\"\r\n    Print \"new testrun.\" + Time(24)\r\n    Print \"-----------\"\r\n    End Sub\r\n\r\n### Include the .mb file that you want to test\r\n\r\nIf the .mb that you want to test is located in the same directory as the testrunner:\r\n    Include \"MapBasicUnit.mb\"\r\n    Include \"<name_of_mb_to_test>.mb\"\r\n    \r\n    Declare Sub Main\r\n    \r\n    Sub Main\r\n    Print \"-----------\"\r\n    Print \"new testrun.\" + Time(24)\r\n    Print \"-----------\"\r\n    End Sub\r\n\r\n\r\n### Start writing unit test with assertions\r\n\r\nLet's say that you have a mb file called Trim.mb with the following content:\r\n\r\n    Declare Function Trim(Byval word As String) As String\r\n    \r\n    Function Trim(Byval word As String) As String\r\n    Trim = LTrim$(RTrim$(word))\r\n    End Function\r\n\r\nThen you can write a unit test like this:\r\n\r\n    Include \"Trim.mb\"\r\n    Include \"MapBasicUnit.mb\"\r\n    \r\n    Declare Sub Main\r\n    \r\n    Sub Main\r\n    Print \"-----------\"\r\n    Print \"new testrun.\" + Time(24)\r\n    Print \"-----------\"\r\n    \r\n    Call AssertStringEqual(\"TestThatStringIsTrimmed\", \"trimmed string\", Trim(\" trimmed string  \"))\r\n    \r\n    End Sub\r\n\r\nIn MapInfo the `Message` window will show:\r\n\r\n    -----------\r\n    new testrun.22:09:07\r\n    -----------\r\n    Test: TestThatStringIsTrimmed has passed.\r\n\r\nFeatures\r\n--------\r\n\r\nThe following assertions are currently available in the `MapBasicUnit.mb`:\r\n\r\n    (Call) AssertTrue(Byval testName As String, ByVal actual As Logical)\r\n    (Call) AssertStringEqual(Byval testName As String, Byval expected As String, Byval actual As String)\r\n    (Call) AssertIntegerEqual(Byval testName As String, Byval expected As Integer, Byval actual As Integer)\r\n\r\n`Assertions` are always takes a `testName` argument for identification of the assertion. It is strongly recommended that the `testName` is unique. \r\n\r\nCurrently test runs are reported through the MapInfo `message` window, but this may be configurable in the future to enable writing test failures and passes to a file to allow integration with a continues integration system.\r\n","google":"UA-48480084-1","note":"Don't delete this file! It's used internally to help with page regeneration."}