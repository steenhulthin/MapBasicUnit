' Uncomment the line below only if the mapbasic.def has not been included already
'Include "mapbasic.def" 

Type TestReport
	testName As String
	hasTestPassed As Logical
	actual As String
	expected As String
	End Type

Declare Sub InternalAssertTrue(ByVal testName As String, ByVal Actual As Logical, testResult As TestReport)

Declare Sub AssertTrue(Byval testName As String, ByVal actual As Logical) 

Declare Sub InternalAssertStringEqual(ByVal testName As String, ByVal expected As String, ByVal actual As String, testResult As TestReport)

Declare Sub AssertStringEqual(Byval testName As String, Byval expected As String, Byval actual As String)

Declare Sub InternalAssertIntegerEqual(ByVal testName As String, ByVal expected As Integer, ByVal actual As Integer, testResult As TestReport)

Declare Sub AssertIntegerEqual(Byval testName As String, Byval expected As Integer, Byval actual As Integer)

Declare Sub InternalAssertFloatEqual(ByVal testName As String, ByVal expected As Float, ByVal actual As Float, testResult As TestReport, Byval within As Float)

Declare Sub AssertFloatEqual(Byval testName As String, Byval expected As Float, Byval actual As Float, Byval within As Float)

Declare Sub SaveTestresults(testResult As TestReport)

Declare Function ConvertErrorReportToString(report As TestReport) As String

Sub InternalAssertTrue(ByVal testName As String, ByVal Actual As Logical, testResult As TestReport)
testResult.testName = testName
If Actual then
testResult.actual = "TRUE (type: Logical)"
Else
testResult.actual = "FALSE (type: Logical)"
End If
testResult.expected = "TRUE (type: Logical)"
If Actual <> TRUE then testResult.hasTestPassed = FALSE
Else testResult.hasTestPassed = TRUE
End If
End Sub

Sub InternalAssertStringEqual(ByVal testName As String, ByVal expected As String, ByVal actual As String, testResult As TestReport)
testResult.testName = testName
testResult.expected = expected + " (type: String)"
testResult.actual = actual + " (type: String)"
If StringCompare( expected, actual ) = 0 then testResult.hasTestPassed = True
Else testResult.hasTestPassed = False
End If
End Sub

Sub InternalAssertIntegerEqual(ByVal testName As String, ByVal expected As Integer, ByVal actual As Integer, testResult As TestReport)
testResult.testName = testName
testResult.expected = expected + " (type: Integer)"
testResult.actual = actual + " (type: Integer)"
If expected = actual then testResult.hasTestPassed = True
Else testResult.hasTestPassed = False
End If
End Sub

Sub InternalAssertFloatEqual(ByVal testName As String, ByVal expected As Float, ByVal actual As Float, testResult As TestReport, Byval within As Float)
testResult.testName = testName
testResult.expected = expected + " (type: Float)"
testResult.actual = actual + " (type: Float)"
If actual - expected Between -within And within then testResult.hasTestPassed = True
Else testResult.hasTestPassed = False
End If
End Sub

Sub AssertTrue(Byval testName As String, ByVal actual As Logical) 
Dim testResult As TestReport
Call InternalAssertTrue(testName, actual, testResult)
Call SaveTestresults(testResult)
End Sub

Sub AssertStringEqual(Byval testName As String, Byval expected As String, Byval actual As String)
Dim testResult As TestReport
Call InternalAssertStringEqual(testName, expected, actual, testResult)
Call SaveTestresults(testResult)
End Sub

Sub AssertIntegerEqual(Byval testName As String, Byval expected As Integer, Byval actual As Integer)
Dim testResult As TestReport
Call InternalAssertIntegerEqual(testName, expected, actual, testResult)
Call SaveTestresults(testResult)
End Sub

Sub AssertFloatEqual(Byval testName As String, Byval expected As Float, Byval actual As Float, Byval within As Float)
Dim testResult As TestReport
Call InternalAssertFloatEqual(testName, expected, actual, testResult, within)
Call SaveTestresults(testResult)
End Sub

Sub SaveTestresults(testResult As TestReport)
Dim testResultString As String
testResultString = ConvertErrorReportToString(testResult)
Print testResultString
End Sub

Function ConvertErrorReportToString(report As TestReport) As String
If report.hasTestPassed <> TRUE then 
	ConvertErrorReportToString = "X FAILED - Test: " + report.testName + ". Expected " + report.expected + ", but was " + report.actual
Else 
	ConvertErrorReportToString = "0 passed - Test: " + report.testName + "."	
End If
End Function